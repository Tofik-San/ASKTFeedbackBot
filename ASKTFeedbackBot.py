import os
from fastapi import FastAPI, Request
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    filters, CallbackQueryHandler, ContextTypes, ChatMemberHandler
)

TOKEN = os.getenv("TELEGRAM_TOKEN")
GROUP_CHAT_ID = -1002794841645

app = FastAPI()
application = Application.builder().token(TOKEN).build()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ
async def greet_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    member = update.chat_member
    if member.new_chat_member.status == "member":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üëç –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å", callback_data="like")],
            [InlineKeyboardButton("üëé –ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å", callback_data="dislike")]
        ])
        await context.bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text=f"–ü—Ä–∏–≤–µ—Ç, {member.from_user.first_name}!\n–û—Å—Ç–∞–≤—å –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ:",
            reply_markup=keyboard
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def handle_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "like":
        await query.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ê —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å.")
    elif query.data == "dislike":
        await query.message.reply_text("–ñ–∞–ª—å. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –Ω–µ —É—Å—Ç—Ä–æ–∏–ª–æ.")

# –ú–æ–¥–µ—Ä–∞—Ü–∏—è: —É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∞–º–∞ / –º–∞—Ç–∞ / —Å—Å—ã–ª–æ–∫
BAD_WORDS = ["—Ö—É–π", "–ø–∏–∑–¥", "–µ–±–∞", "–Ω–∞—Ö—É–π", "—Å—É–∫–∞", "–ø–æ—Ä–Ω–æ", "http", "t.me", "https"]

async def moderate_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    user_id = update.message.from_user.id

    if any(bad in text for bad in BAD_WORDS):
        await update.message.delete()
        await context.bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text=f"–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ä—É—à–∏–ª –ø—Ä–∞–≤–∏–ª–∞."
        )
        try:
            await context.bot.ban_chat_member(GROUP_CHAT_ID, user_id)
        except:
            pass  # –±–æ—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –°—Ç–∞—Ä—Ç-–∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤.")

# –†–æ—É—Ç –≤–µ–±—Ö—É–∫–∞
@app.post("/")
async def handle_webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.initialize()
    await application.process_update(update)
    return {"ok": True}

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
application.add_handler(ChatMemberHandler(greet_user, ChatMemberHandler.CHAT_MEMBER))
application.add_handler(CallbackQueryHandler(handle_feedback))
application.add_handler(MessageHandler(filters.TEXT & filters.Chat(GROUP_CHAT_ID), moderate_messages))
application.add_handler(CommandHandler("start", start))
